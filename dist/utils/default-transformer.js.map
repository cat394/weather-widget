{"version":3,"file":"default-transformer.js","sourceRoot":"","sources":["../../src/utils/default-transformer.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,sBAAsB;IAClC,YAAoB,IAAiB;QAAjB,SAAI,GAAJ,IAAI,CAAa;IAAG,CAAC;IAEzC,cAAc;QACb,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAElC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,KAAK,MAAM,GAAG,EAAE,CAAC;QAErC,OAAO,IAAI,CAAC;IACb,CAAC;IAED,aAAa;QACZ,MAAM,sBAAsB,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAEtE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhE,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACjD,GAAG,IAAI;gBACP,GAAG,EAAE,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC;aACrC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,oBAAoB;QACnB,MAAM,cAAc,GAAG,CAAC,IAAY,EAAE,EAAE;YACvC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;YAE5B,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAEjC,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAErC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;QAC1D,CAAC,CAAC;QAEF,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACjD,GAAG,IAAI;gBACP,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;aAC/B,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,cAAc,EAAE;aAC1B,aAAa,EAAE;aACf,oBAAoB,EAAE;aACtB,MAAM,EAAE,CAAC;IACZ,CAAC;CACD","sourcesContent":["import { WeatherData } from \"../components/types\";\r\n\r\nexport class DefaultDataTransformer {\r\n\tconstructor(private data: WeatherData) {}\r\n\r\n\ttransform_date(): this {\r\n\t\tconst date = new Date(this.data.date);\r\n\r\n\t\tconst month = date.getMonth() + 1;\r\n\r\n\t\tconst day = date.getDate();\r\n\r\n\t\tthis.data.date = `${month} / ${day}`;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\ttransform_pop(): this {\r\n\t\tconst decitmal_to_percentage = (pop: number) => Math.round(pop * 100);\r\n\r\n\t\tthis.data.main.pop = decitmal_to_percentage(this.data.main.pop);\r\n\r\n\t\tif (this.data.hours) {\r\n\t\t\tthis.data.hours = this.data?.hours.map((hour) => ({\r\n\t\t\t\t...hour,\r\n\t\t\t\tpop: decitmal_to_percentage(hour.pop),\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\ttransform_hours_time(): this {\r\n\t\tconst transform_time = (time: string) => {\r\n\t\t\tconst date = new Date(time);\r\n\r\n\t\t\tconst hours = date.getUTCHours();\r\n\r\n\t\t\tconst minutes = date.getUTCMinutes();\r\n\r\n\t\t\treturn `${hours}:${minutes.toString().padStart(2, \"0\")}`;\r\n\t\t};\r\n\r\n\t\tif (this.data.hours) {\r\n\t\t\tthis.data.hours = this.data?.hours.map((hour) => ({\r\n\t\t\t\t...hour,\r\n\t\t\t\ttime: transform_time(hour.time),\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tresult() {\r\n\t\treturn this.data;\r\n\t}\r\n\r\n\ttransform() {\r\n\t\treturn this.transform_date()\r\n\t\t\t.transform_pop()\r\n\t\t\t.transform_hours_time()\r\n\t\t\t.result();\r\n\t}\r\n}\r\n"]}